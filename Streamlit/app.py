# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o7f7d8k9KDgEbi3eTO5EelFwdBOTL6eP
"""

import re
import string
import pandas as pd
import streamlit as st
import joblib
import numpy as np
import nltk
from Sastrawi.Stemmer.StemmerFactory import StemmerFactory
from nltk.tokenize import word_tokenize

# Muat model-model
#models = [joblib.load(f"ensemble_average_model_fold_{i}.joblib") for i in range(5)]
models = [joblib.load(f"best_ensemble_average_model.joblib")]

# Muat CountVectorizer
vectorizer = joblib.load("tfidf_model.joblib")

# Inisialisasi stemmer
factory = StemmerFactory()
stemmer = factory.create_stemmer()

# Fungsi untuk membersihkan, case folding, tokenisasi, slangwords, dan stemming
def remove_punct(sentence):
    sentence = ''.join([char for char in sentence if char not in string.punctuation])
    return sentence

def preprocess(sentence):
    # Cleaning
    sentence = re.sub(r'http\S+', '', sentence)
    sentence = re.sub('@[\w]*', '', sentence)
    sentence = re.sub(r'#[A-Za-z0-9_]+', '', sentence)
    sentence = re.sub(r'[\S]+\.(net|com|org|gov|id|co|COM|ID)[\S]*\s?', '', sentence)
    sentence = re.sub(r'\b\w{1,2}\b', '', sentence)
    sentence = re.sub(r'^b[\s]+', '', sentence)
    sentence = re.sub(r'[,-/]', ' ', sentence)
    sentence = re.sub('\n ', '', sentence)
    sentence = re.sub(r"\b[a-zA-Z]\b", "", str(sentence))
    sentence = re.sub(r"[^\w\s]", " ", str(sentence))
    sentence = re.sub('\s+', ' ', sentence)
    sentence = re.sub(r'xaa', '', sentence)
    sentence = re.sub(r'xab', '', sentence)
    sentence = re.sub(r'xad', '', sentence)
    sentence = re.sub(r'xba', '', sentence)
    sentence = re.sub(r'xac', '', sentence)
    sentence = re.sub(r'xbb', '', sentence)
    sentence = re.sub(r'xbc', '', sentence)
    sentence = re.sub(r'xbd', '', sentence)
    sentence = re.sub(r'xbe', '', sentence)
    sentence = re.sub(r'xbf', '', sentence)
    sentence = re.sub(r'xef', '', sentence)
    sentence = re.sub(r'&amp;', '', str(sentence))
    sentence = remove_punct(sentence)

    # Case Folding
    sentence = sentence.lower()

    # Tokenization
    tokens = word_tokenize(sentence)

    # Slangwords
    kamus_slangword = pd.read_csv("Kamus_Slangwords.csv")
    kata_normalisasi_dict = {}

    for index, row in kamus_slangword.iterrows():
        if row[0] not in kata_normalisasi_dict:
            kata_normalisasi_dict[row[0]] = row[1]

    tokens = [kata_normalisasi_dict[term] if term in kata_normalisasi_dict else term for term in tokens]

    # Stopwords Removal
    stopword = nltk.corpus.stopwords.words('indonesian')
    stopword.remove("lama")
    stopword.remove("tidak")
    stopword.remove("enggak")
    tokens = [word for word in tokens if word not in stopword]

    # Stemming
    tokens = [stemmer.stem(word) for word in tokens]
    return ' '.join(tokens)

# Fungsi untuk membuat prediksi
def predict(sentence):
    # Preprocessing
    preprocessed_sentence = preprocess(sentence)

    # Transformasi kalimat input menjadi list
    input_data = [preprocessed_sentence]

    # Praproses teks menggunakan vectorizer yang telah dimuat
    input_data_vectorized = vectorizer.transform(input_data)

    # Melakukan prediksi menggunakan model yang dipilih
    predictions = [model.predict(input_data_vectorized)[0] for model in models]

    # Membuat pemetaan label sentimen ke nilai numerik
    label_mapping = {'Positif': 1, 'Negatif': -1, 'Netral': 0}
    numeric_predictions = [label_mapping[prediction] for prediction in predictions]

    # Menghitung prediksi rata-rata
    mean_prediction = int(np.mean(numeric_predictions))

    # Menambahkan label untuk hasil prediksi
    label_result = "Positif" if mean_prediction == 1 else "Negatif" if mean_prediction == -1 else "Netral"
    return label_result

# Aplikasi Streamlit
st.title("Aplikasi Analisis Sentimen")
st.write("Masukkan kalimat untuk diprediksi sentimennya.")

# Input pengguna
sentence = st.text_area("Masukkan kalimat:", height=100)

# Melakukan prediksi saat tombol diklik
if st.button("Prediksi"):
    if sentence:
        sentiment = predict(sentence)
        st.write(f"Kalimat ini diprediksi sebagai kalimat yang bersentimen: {sentiment}")
    else:
        st.warning("Silakan masukkan sebuah kalimat.")